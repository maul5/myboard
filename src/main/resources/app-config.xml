<?xml version="1.0" encoding="UTF-8" ?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/data/jpa
       http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd">
    <!--
    base-package를 포함한 하위 패키지를 검색해서
    @Component, @Service, @Repository, @Controller 어노테이션이 붙어 있는 클래스들을 스프링 빈으로 자동 등록
    <context:annotation-config/> 기능 포함
    -->
    <context:component-scan base-package="kr.pe.stella.shop"/>


    <!--
    (Spring MVC 기능 활성화)
    @Controller 애노테이션을 이용한 컨트롤러를 사용하기 위한 설정
    -->
    <mvc:annotation-driven />


    <!-- Spring 빈에 예외 변환 AOP를 적용 -->
    <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />


    <!-- DB dataSource -->
    <bean id="dataSource"
          class="org.springframework.jdbc.datasource.SimpleDriverDataSource">
        <property name="driverClass" value="org.mariadb.jdbc.Driver" />
        <property name="url" value="jdbc:mariadb://52.40.188.249:3306/myboard" />
        <property name="username" value="maul5" />
        <property name="password" value="jtpark1469" />
    </bean>

    <!-- JPA transaction -->
    <bean id="transactionManager"
          class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- JPA -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- @Entity 탐색 시작 위치 -->
        <property name="packagesToScan" value="kr.pe.stella.shop.domain" />
        <property name="jpaVendorAdapter">
            <!-- 하이버네이트 구현체 사용 -->
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
        </property>
        <!-- 하이버네이트 상세 설정 -->
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop> <!-- 방언 -->
                <prop key="hibernate.show_sql">true</prop> <!-- SQL 보기 -->
                <prop key="hibernate.format_sql">true</prop> <!-- SQL 정렬해서 보기 -->
                <prop key="hibernate.use_sql_comments">true</prop> <!-- SQL 코멘트 보기 -->
                <prop key="hibernate.new_generator_mappings">true</prop> <!-- 새 버전의 ID 생성 옵션 -->
                <!-- DDL 자동 생성 -->
                <!--<prop key="hibernate.hbm2ddl.auto">create</prop>-->
            </props>
        </property>
    </bean>

    <!-- transaction 활성화 -->
    <tx:annotation-driven transaction-manager="transactionManager" />

    <jpa:repositories base-package="kr.pe.stella.shop.repository" />

</beans>